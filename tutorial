I. Unbuffered channel
- A unbuffered channel is not capable of storing data within it

Ex1: error
    ch := make(chan int)
    fmt.Println("Main goroutine is running")
    ch <- 1

    go func() {
    	fmt.Println("Anonymous goroutine is running")
    	fmt.Println(<-ch)
    }()

- Result: deadlock
- Explain:
			1. ch := make(chan int): This creates an unbuffered channel ch that can send and receive integer values.
			2. fmt.Println("Main goroutine is running"): This prints a message indicating that the main goroutine has started executing.
			3. ch <- 1: This line attempts to send the value 1 into the channel ch.
		       However, since this is an unbuffered channel and there's no receiver ready yet.
		       So, this operation will block the main goroutine => the next commands are no execute

- Fix: create another goroutine that precedes the operation ch <- 1

Ex2: fix ex1
    ch := make(chan int)
    fmt.Println("Main goroutine is running")

    go func() {
    	fmt.Println("Anonymous goroutine is running")
    	fmt.Println(<-ch)
    }()

    ch <- 1

Ex3: error
    c := make(chan int)
    c <- 2
    fmt.Printf("Received: %d\n", <-c)

- Result: error
- Explain: c <-2: this line is executed, it will block goroutine

II. Method close(): Closing a channel indicates that no more values will be sent through it.
Ex1:
    ch := make(chan int)
    fmt.Println("Main goroutine is running")
    go func() {
    	fmt.Println("Anonymous goroutine is running")
    	for i := 0; i < 10; i++ {
    		fmt.Printf("Value from channel %d\n", <-ch)
    	}
    }()

    for i := 0; i < 10; i++ {
    	ch <- i
    }

    close(ch)

Ex2. for-range for channel and check channel closed
    ch := make(chan int)
    fmt.Println("Main goroutine is running")
    go func() {
    	fmt.Println("Anonymous goroutine is running")
    	for v := range ch {
    		fmt.Printf("Value from channel %d\n", v)
    	}
    }()

    for i := 0; i < 10; i++ {
    	ch <- i
    }

    close(ch)

III. for-select-case
Ex1: select-case: choose a channel that have data and run case chosen
    r := rand.New(rand.NewSource(time.Now().Unix()))

	ch1 := make(chan int)
	ch2 := make(chan int)

	go func() {
		time.Sleep(time.Second * time.Duration(r.Intn(5)))
		ch1 <- 1
	}()

	go func() {
		time.Sleep(time.Second * time.Duration(r.Intn(5)))
		ch2 <- 2
	}()
    for {
        select {
        case v1 := <-ch1:
            fmt.Println("Ch1 come first with value:", v1)
            fmt.Println("then ch2 with value:", <-ch2)
        case v2 := <-ch2:
            fmt.Println("Ch2 come first with value:", v2)
            fmt.Println("then ch1 with value:", <-ch1)
        }
	}

IV. Buffered channel
- A buffered channel is capable of storing data within it => So, it is not full, data send to channel without block goroutine

Ex1:
	ch := make(chan int, 2)

	ch <- 1
	ch <- 2
	ch <- 3

- Result: deadlock
- Explain: ch <- 3. This line attempts send data to buffered channel that overflows the channel

V. Unbuffered vs buffered channel
- Let's imagine a buffered channel have a warehouse to store data. When warehouse is not full, data can still be sent
  in without causing deadlock.

VI. Why does console sometimes only print 8 persons instead of 9?
    func main() {
        fmt.Println("Main goroutine")
    	ch := make(chan model.Person)

    	go func() {
    	    fmt.Println("Anonymous goroutine")
    		for v := range ch {
    			fmt.Println(v.ToString())
    		}
    	}()

    	for i := 0; i < 10; i++ {
    		send(ch, i)
    	}

    	close(ch)
    }

    func send(ch chan model.Person, id int) {
    	ch <- model.Person{Id: id, Name: "Hung", Age: rand.IntN(100), Address: "VY,VP"}
    }


- A few reasons:
    + The program(main function - main goroutine) might be terminating before all goroutines finish executing.
    + There might be a race condition in the code not shown here.
    + The rand.IntN(100) function might be causing some unexpected behavior if it's not properly seeded.
- Fix:
    + Sleep main goroutine
    + Make main goroutine must wait for anonymous goroutine to finish

    //sleep main goroutine
    func main() {
        ...
        close(ch)
    	time.Sleep(1 * time.Microsecond)
    }

    //use sync.WaitGroup
    func main() {
        ch := make(chan model.Person)
        var wg sync.WaitGroup
        wg.Add(1)

        go func() {
           defer wg.Done()
           for v := range ch {
              fmt.Println(v.ToString())
           }
        }()

        for i := 0; i < 10; i++ {
           send(ch, i)
        }

        close(ch)
        wg.Wait()
    }
